En todos los forms tenemos validaciones de los inputs de los usuarios
Evitamos el CSRF con el CSRF token
SQLLite para desarrollo y Postgress para producción
Trabajo con git y entornos virtuales
Variable lazy en relaciones base de datos
Debug to False para no dar info de errores
Limitar nunero de intentos de inicio de sesion
Proteccion de rutas, login i recuperar contadenyas seguro
Compartir post privado
Jwt o oauth para login
Logging acciones
Complejidad contrasenyas
Brcypt utiliza sal i finciones de coste
FileAllowed para protejer el tipo de archivo de subida
Randomizar nombre ficheros subido por el usuario, para que no coincida con uno existente
Redimesion de tam de imagenes para optimizar almacenamiento
Utilización de get_or_404 para evitar errores provocados por el cliente
Solo se puede borrar mediante post, no se puede harcorear la url
Utilización de https://itsdangerous.palletsprojects.com/en/1.1.x/ para reset password
todo lo de reset password
Variables de entorno para ocultar usuario y contraseña del correo- Para que en el codigo no haya informacion que no debe estr ahi
aplication factory and blueprints
-Checquear el tamaño de un titulo en el post(100)
-Ver en el email, si no comprobamos el tam, y introducimos mas de 100 caracteres ver si hay overflow
-cambiar el login para que sea por usuario no correo
-Post privados y posts publicos
-Mirar como proteger laa ruta de las imagenes, y borrar la imagen de perfil vieja al actualizar el perfil

